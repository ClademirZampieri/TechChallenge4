name: Build, test, and deploy to Kubernetes

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.x'
          include-prerelease: true

      - name: Build API with dotnet
        run: dotnet build --configuration Release

  unit-test:
    runs-on: windows-latest
    needs: build
    continue-on-error: true

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.x'
          include-prerelease: true

      - name: Test API with dotnet
        if: ${{ 1 != 1 }}
        run: dotnet test ./TechChallenge.Domain.UnitTest/TechChallenge.Domain.UnitTest.csproj --configuration Release

  integration-test:
    runs-on: windows-latest
    needs: build
    continue-on-error: true

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '8.x'
          include-prerelease: true

      - name: Pull SQL Server Image
        run: docker pull mcr.microsoft.com/windows/servercore:ltsc2022

      - name: Run SQL Server Container
        run: docker run -e "ACCEPT_EULA=Y" -e "SA_PASSWORD=YourStrongPassword123!" -p 1433:1433 -d --name sql-server mcr.microsoft.com/windows/servercore:ltsc2022
        shell: pwsh

      - name: Test API with dotnet
        if: ${{ 1 != 1 }}
        run: dotnet test ./TechChallenge.Domain.IntegrationTest/TechChallenge.Domain.IntegrationTest.csproj --configuration Release

  build-and-push-images:
    runs-on: ubuntu-latest
    needs: [unit-test, integration-test]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure Docker for Insecure Registry
        run: |
          echo '{"insecure-registries":["zampieri.sytes.net:5000"]}' | sudo tee /etc/docker/daemon.json
          sudo systemctl restart docker

      - name: Build and push API Docker image
        run: |
          docker build -t zampieri.sytes.net:5000/api-front-tech-challenge:latest -f ./DevOps/webapi/Dockerfile .
          docker push zampieri.sytes.net:5000/api-front-tech-challenge:latest

      - name: Build and push FrontEnd Docker image
        run: |
          docker build -t zampieri.sytes.net:5000/front-tech-challenge:latest -f ./DevOps/frontend/Dockerfile .
          docker push zampieri.sytes.net:5000/front-tech-challenge:latest

      - name: Build and push Application Docker image
        run: |
          docker build -t zampieri.sytes.net:5000/application-tech-challenge:latest -f ./DevOps/application/Dockerfile .
          docker push zampieri.sytes.net:5000/application-tech-challenge:latest

  deploy-to-kubernetes:
    runs-on: self-hosted
    needs: build-and-push-images

    steps:
      - uses: actions/checkout@v4

      - name: Debug: Check if KUBECONFIG_DATA exists
        run: |
          if [ -z "${{ secrets.KUBECONFIG_DATA }}" ]; then
            echo "ERROR: KUBECONFIG_DATA is empty or not set. Please check your GitHub secrets."
            exit 1
          else
            echo "KUBECONFIG_DATA is set."
          fi

      - name: Set up kubectl
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG_DATA }}
        run: |
          echo "Decoding KUBECONFIG_DATA..."
          echo "${KUBECONFIG_DATA}" | base64 -d > kubeconfig
          if [ ! -f kubeconfig ]; then
            echo "ERROR: The kubeconfig file was not created."
            exit 1
          fi
          export KUBECONFIG=$(pwd)/kubeconfig
          echo "KUBECONFIG set to: $KUBECONFIG"
          kubectl cluster-info

      - name: Deploy FrontEnd to Kubernetes
        run: |
          echo "Deploying FrontEnd..."
          kubectl apply -k ./Kubernetes/frontend || {
            echo "ERROR: Failed to deploy FrontEnd."
            exit 1
          }
          echo "FrontEnd deployment completed successfully."

      - name: Deploy API to Kubernetes
        run: |
          echo "Deploying API..."
          kubectl apply -k ./Kubernetes/webapi || {
            echo "ERROR: Failed to deploy API."
            exit 1
          }
          echo "API deployment completed successfully."

      - name: Deploy Application to Kubernetes
        run: |
          echo "Deploying Application..."
          kubectl apply -k ./Kubernetes/application || {
            echo "ERROR: Failed to deploy Application."
            exit 1
          }
          echo "Application deployment completed successfully."
